<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <CheatEntries>
    <CheatEntry>
      <ID>97</ID>
      <Description>"get_player_transform #1 [JUMP TO ACTIVATE]"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Celeste.exe
  Version:
  Date   : 2020-05-31
  Author : L_e_on_

  This script creates pointer to player transform position
}

[ENABLE]

aobscan(player_transform_inject,D9 40 28 D8 25)
alloc(newmem,$1000)

label(code)
label(return)

alloc(player_transform_base, 4)       // allocates 4 bytes of memory
registersymbol(player_transform_base) // registers this memory as a symbol
                                      // this means you can reference the memory
                                      // outside the script.

                                      // player_transform_base will hold the
                                      // player geometry base address

                                      // then you can access the x &amp; y values
                                      // by accessing base + offset
                                      // where the offsets are:
                                      // 0x28 -- y pos
                                      // 0x24 -- x pos


newmem:
  mov [player_transform_base],eax     // moves player geometry base address into
                                      // the allocated memory
code:
  fld dword ptr [eax+28]
  jmp return

player_transform_inject:
  jmp newmem
  nop
  nop
return:
registersymbol(player_transform_inject)

[DISABLE]

player_transform_inject:
  db D9 40 28 D8 25

dealloc(player_transform_base)
dealloc(newmem)
unregistersymbol(player_transform_base)
unregistersymbol(player_transform_inject)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>99</ID>
          <Description>"x"</Description>
          <VariableType>Float</VariableType>
          <Address>player_transform_base</Address>
          <Offsets>
            <Offset>24</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"y"</Description>
          <VariableType>Float</VariableType>
          <Address>player_transform_base</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>103</ID>
      <Description>"get_player_transform #2"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Celeste.exe
  Version: 
  Date   : 2020-05-31
  Author : L_e_on_

  This script creates pointer to player transform position
}

[ENABLE]

aobscan(get_player_transform_injection_point,24 F3 0F 7E 06 66 0F D6 07 8B 8D)
alloc(newmem,$1000)

label(code)
label(return)

alloc(player_transform_base, 4)       // allocates 4 bytes of memory
registersymbol(player_transform_base) // registers this memory as a symbol
                                      // this means you can reference the memory
                                      // outside the script.

                                      // player_transform_base will hold the
                                      // player geometry base address

                                      // then you can access the x &amp; y values
                                      // by accessing base + offset

                                      // in this context the value of the x position
                                      // is being directly accessed in esi
                                      // so I moved the address of the x pos
                                      // into my allocated memory 'player_transform_base'


newmem:
  push eax                            // pushes value in eax onto stack
                                      // this preserves the value so i can do whatever with it
  lea eax, [esi]                      // moves address held in esi into eax
                                      // esi is holding the address of the x pos
  mov [player_transform_base], eax    // moves the address into my allocated memory
  pop eax                             // pops the original value of eax off of the stack
                                      // and sets eax back to it's original value

code:
  movq xmm0,[esi]
  movq [edi],xmm0
  jmp return

get_player_transform_injection_point+01:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(get_player_transform_injection_point)

[DISABLE]
get_player_transform_injection_point+01:
  db F3 0F 7E 06 66 0F D6 07

unregistersymbol(get_player_transform_injection_point)
dealloc(newmem)
dealloc(player_transform_base)
unregistersymbol(player_transform_base)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>104</ID>
          <Description>"x"</Description>
          <VariableType>Float</VariableType>
          <Address>player_transform_base</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>105</ID>
          <Description>"y"</Description>
          <VariableType>Float</VariableType>
          <Address>player_transform_base</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
